# -*- coding: utf-8 -*-
"""NovaCommerce Marketing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Peu01Mgoh4eZdDN1HSNddVHtT4F5lYn8
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
data = pd.read_excel('freelance.xlsx')
data.head()

df.columns

print(data.info())

print(data.describe())

print(data.isnull().sum())

print(data[['Impressions', 'Clicks', 'Conversions', 'Total_Spend', 'Revenue_Generated']].describe())

import seaborn as sns
import matplotlib.pyplot as plt


data[['Impressions', 'Clicks', 'Conversions', 'Total_Spend', 'Revenue_Generated']].hist(bins=30, figsize=(10, 8))
plt.show()

sns.countplot(x='Age_Group', data=data)
plt.show()

sns.countplot(x='Gender', data=data)
plt.show()

sns.countplot(x='Location', data=data)
plt.xticks(rotation=90)
plt.show()

sns.scatterplot(x='Impressions', y='Clicks', data=data)
plt.title("Relationship between Impressions and Clicks")
plt.show()

sns.scatterplot(x='Total_Spend', y='Revenue_Generated', data=data)
plt.title("Relationship between Total Spend and Revenue Generated")
plt.show()
plt.figure(figsize=(8, 6))

#extract month and year from start and end date
data['Month'] = data['Start_Date'].dt.month
data['Year'] = data['Start_Date'].dt.year

monthly_performance = data.groupby(['Year', 'Month']).agg({
    'Impressions': 'sum',
    'Clicks': 'sum',
    'Conversions': 'sum',
    'Total_Spend': 'sum',
    'Revenue_Generated': 'sum'
}).reset_index()

plt.figure(figsize=(12, 6))
sns.lineplot(x='Month', y='Revenue_Generated', hue='Year', data=monthly_performance)
plt.title("Monthly Revenue Generated Over Time")
plt.xlabel("Month")
plt.ylabel("Revenue Generated")
plt.show()

channel_performance = data.groupby('Marketing_Channel').agg({
    'Impressions': 'sum',
    'Clicks': 'sum',
    'Conversions': 'sum',
    'Total_Spend': 'sum',
    'Revenue_Generated': 'sum'
}).reset_index()

channel_performance['CTR'] = (channel_performance['Clicks'] / channel_performance['Impressions']) * 100
channel_performance['Conversion_Rate'] = (channel_performance['Conversions'] / channel_performance['Clicks']) * 100
channel_performance['ROAS'] = channel_performance['Revenue_Generated'] / channel_performance['Total_Spend']

plt.figure(figsize=(10, 6))
sns.barplot(x='Marketing_Channel', y='ROAS', data=channel_performance)
plt.title("ROAS by Marketing Channel")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Marketing_Channel', y='ROAS', data=channel_performance)
plt.title("Distribution of ROAS by Marketing Channel")
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Marketing_Channel', y='Conversion_Rate', data=channel_performance)
plt.title("Distribution of Conversion Rate by Marketing Channel")
plt.xticks(rotation=45)
plt.show()

age_channel_performance = data.groupby(['Age_Group', 'Marketing_Channel']).agg({
    'Clicks': 'sum',
    'Impressions': 'sum'
}).reset_index()

age_channel_performance['CTR'] = (age_channel_performance['Clicks'] / age_channel_performance['Impressions']) * 100

plt.figure(figsize=(12, 6))
sns.lineplot(x='Age_Group', y='CTR', hue='Marketing_Channel', data=age_channel_performance, marker="o")
plt.title("CTR by Age Group and Marketing Channel")
plt.show()

gender_channel_performance = data.groupby(['Gender', 'Marketing_Channel']).agg({
    'Total_Spend': 'sum',
    'Revenue_Generated': 'sum'
}).reset_index()

gender_channel_performance['ROAS'] = gender_channel_performance['Revenue_Generated'] / gender_channel_performance['Total_Spend']

plt.figure(figsize=(10, 6))
sns.barplot(x='Marketing_Channel', y='ROAS', hue='Gender', data=gender_channel_performance)
plt.title("ROAS by Gender and Marketing Channel")
plt.show()

location_performance = data.groupby('Location').agg({
    'Total_Spend': 'sum',
    'Revenue_Generated': 'sum'
}).reset_index()
plt.figure(figsize=(12, 8))
sns.scatterplot(x='Total_Spend', y='Revenue_Generated', data=location_performance, hue='Location', s=100)
plt.title("Total Spend vs Revenue Generated by Location")
plt.xlabel("Total Spend")
plt.ylabel("Revenue Generated")
plt.legend(loc='upper left')
plt.show()

data['Month'] = data['Start_Date'].dt.to_period('M')
time_channel_performance = data.groupby(['Month', 'Marketing_Channel']).agg({
    'Total_Spend': 'sum',
    'Revenue_Generated': 'sum'
}).reset_index()

time_channel_performance['ROAS'] = time_channel_performance['Revenue_Generated'] / time_channel_performance['Total_Spend']

time_channel_performance['Month'] = time_channel_performance['Month'].astype(str)

plt.figure(figsize=(12, 6))
sns.lineplot(x='Month', y='ROAS', hue='Marketing_Channel', data=time_channel_performance, marker="o")
plt.title("ROAS Over Time by Marketing Channel")
plt.xticks(rotation=45)
plt.show()

data['CPC'] = data.apply(lambda row: row['Total_Spend'] / row['Clicks'] if row['Clicks'] > 0 else 0, axis=1)
data['CPA'] = data.apply(lambda row: row['Total_Spend'] / row['Conversions'] if row['Conversions'] > 0 else 0, axis=1)
data['ROAS'] = data.apply(lambda row: row['Revenue_Generated'] / row['Total_Spend'] if row['Total_Spend'] > 0 else 0, axis=1)

if 'Conversion_Rate' not in data.columns:
    data['Conversion_Rate'] = data['Conversions'] / data['Impressions'] * 100
print(data[['Campaign_ID', 'Campaign_Name', 'Marketing_Channel', 'Conversion_Rate', 'CPC', 'CPA', 'ROAS']].head())

data.to_excel('output_with_metrics.xlsx', index=False)

"""1-Conversion Rate: This metric shows the percentage of users who completed a conversion (e.g., a purchase or sign-up) compared to the number of clicks on the campaign. A higher conversion rate indicates that the campaign is more effective at turning visitors into actual customers.

2-Cost Per Click (CPC): This represents the cost for each click on the ad. By reducing this cost, you can improve the return on investment (ROI) of the campaign.

3-Cost Per Acquisition (CPA): This shows the cost of acquiring each new customer. Understanding this value helps assess how efficiently the campaign is acquiring customers at a reasonable cost.

4-Return on Ad Spend (ROAS): This measures the revenue generated for every dollar spent on the ad campaign. Higher ROAS values mean the campaign was effective in generating good returns for the money spent. **bold text**
"""

# Calculate the required metrics for each campaign
data['Conversion_Rate'] = (data['Conversions'] / data['Clicks']) * 100
data['CPC'] = data['Total_Spend'] / data['Clicks']
data['CPA'] = data['Total_Spend'] / data['Conversions']
data['ROAS'] = data['Revenue_Generated'] / data['Total_Spend']

# Plot CPC comparison by Marketing Channel
plt.figure(figsize=(10, 6))
sns.barplot(data=data, x='Marketing_Channel', y='CPC', palette='viridis')
plt.title('CPC Comparison by Marketing Channel')
plt.xlabel('Marketing Channel')
plt.ylabel('CPC')
plt.xticks(rotation=45)
plt.show()

# Plot CPA comparison by Marketing Channel
plt.figure(figsize=(10, 6))
sns.barplot(data=data, x='Marketing_Channel', y='CPA', palette='plasma')
plt.title('CPA Comparison by Marketing Channel')
plt.xlabel('Marketing Channel')
plt.ylabel('CPA')
plt.xticks(rotation=45)
plt.show()

# Plot ROAS comparison by Marketing Channel
plt.figure(figsize=(10, 6))
sns.barplot(data=data, x='Marketing_Channel', y='ROAS', palette='magma')
plt.title('ROAS Comparison by Marketing Channel')
plt.xlabel('Marketing Channel')
plt.ylabel('ROAS')
plt.xticks(rotation=45)
plt.show()

"""1-CPC (Cost Per Click):A lower CPC indicates that the campaign is more cost-effective in driving traffic to the website. The Marketing Channel with the lowest CPC is performing more efficiently in terms of click costs.
CPA (Cost Per Acquisition):

2-CPA :A lower CPA indicates that the campaign is efficiently converting clicks into customers at a reasonable cost. Channels with lower CPA are better at generating customer acquisitions for the budget spent.

ROAS (Return on Ad Spend):A higher ROAS indicates that the campaign is generating a significant return on the investment. Channels with higher ROAS are delivering better value in terms of revenue compared to the amount spent.
Key Insights:
Channels with a low CPC are more efficient at driving traffic, so you may want to allocate more budget to these channels for cost-effective campaigns.
Channels with a high ROAS are delivering strong returns, suggesting they are highly profitable and should receive further investment.
Channels with a low CPA are more effective at acquiring customers, and improving these campaigns can lead to better customer growth at a lower cost. **bold text**
"""

# Pie chart for CPC distribution by Marketing Channel
cpc_distribution = data.groupby('Marketing_Channel')['CPC'].mean()

plt.figure(figsize=(8, 8))
cpc_distribution.plot(kind='pie', autopct='%1.1f%%', cmap='viridis')
plt.title('CPC Distribution by Marketing Channel')
plt.ylabel('')
plt.show()

# Pie chart for CPA distribution by Marketing Channel
cpa_distribution = data.groupby('Marketing_Channel')['CPA'].mean()

plt.figure(figsize=(8, 8))
cpa_distribution.plot(kind='pie', autopct='%1.1f%%', cmap='plasma')
plt.title('CPA Distribution by Marketing Channel')
plt.ylabel('')
plt.show()

# Pie chart for ROAS distribution by Marketing Channel
roas_distribution = data.groupby('Marketing_Channel')['ROAS'].mean()

plt.figure(figsize=(8, 8))
roas_distribution.plot(kind='pie', autopct='%1.1f%%', cmap='magma')
plt.title('ROAS Distribution by Marketing Channel')
plt.ylabel('')
plt.show()

"""1-CPC Distribution: The chart shows the share of CPC across channels, helping to identify the most cost-effective channels for driving traffic.

2-CPA Distribution: This chart indicates which channels have the lowest cost per acquisition, making them the most efficient in terms of customer acquisition.

3-ROAS Distribution: The chart highlights the channels generating the best return on investment (ROI) in terms of revenue generated for each dollar spent. **bold text**
"""

# Age Group Analysis
age_group_cpc = data.groupby('Age_Group')['CPC'].mean()
age_group_cpa = data.groupby('Age_Group')['CPA'].mean()
age_group_roas = data.groupby('Age_Group')['ROAS'].mean()

# Gender Analysis
gender_cpc = data.groupby('Gender')['CPC'].mean()
gender_cpa = data.groupby('Gender')['CPA'].mean()
gender_roas = data.groupby('Gender')['ROAS'].mean()

# Location Analysis (using the Location column)
location_cpc = data.groupby('Location')['CPC'].mean()
location_cpa = data.groupby('Location')['CPA'].mean()
location_roas = data.groupby('Location')['ROAS'].mean()

plt.figure(figsize=(10, 6))
sns.barplot(x=age_group_cpc.index, y=age_group_cpc.values, palette='viridis')
plt.title('CPC by Age Group')
plt.xlabel('Age Group')
plt.ylabel('CPC')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x=gender_cpc.index, y=gender_cpc.values, palette='plasma')
plt.title('CPC by Gender')
plt.xlabel('Gender')
plt.ylabel('CPC')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(x=location_cpc.index, y=location_cpc.values, palette='magma')
plt.title('CPC by Location')
plt.xlabel('Location')
plt.ylabel('CPC')
plt.xticks(rotation=45)
plt.show()

data['Start_Date'] = pd.to_datetime(data['Start_Date'])
data['Day_of_Week'] = data['Start_Date'].dt.day_name()  # e.g., Monday, Tuesday...
data['Month'] = data['Start_Date'].dt.month_name()  # e.g., January, February...

day_of_week_cpc = data.groupby('Day_of_Week')['CPC'].mean()
day_of_week_cpa = data.groupby('Day_of_Week')['CPA'].mean()
day_of_week_roas = data.groupby('Day_of_Week')['ROAS'].mean()

# Pl
plt.figure(figsize=(10, 6))
sns.barplot(x=day_of_week_cpc.index, y=day_of_week_cpc.values, palette='viridis')
plt.title('CPC by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('CPC')
plt.xticks(rotation=45)
plt.show()

# Plot CPA by Day of Week
plt.figure(figsize=(10, 6))
sns.barplot(x=day_of_week_cpa.index, y=day_of_week_cpa.values, palette='plasma')
plt.title('CPA by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('CPA')
plt.xticks(rotation=45)
plt.show()

# Plot ROAS by Day of Week
plt.figure(figsize=(10, 6))
sns.barplot(x=day_of_week_roas.index, y=day_of_week_roas.values, palette='magma')
plt.title('ROAS by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('ROAS')
plt.xticks(rotation=45)
plt.show()

# CPC by Month
month_cpc = data.groupby('Month')['CPC'].mean()

# CPA by Month
month_cpa = data.groupby('Month')['CPA'].mean()

# ROAS by Month
month_roas = data.groupby('Month')['ROAS'].mean()

# Plot CPC by Month
plt.figure(figsize=(10, 6))
sns.barplot(x=month_cpc.index, y=month_cpc.values, palette='viridis')
plt.title('CPC by Month')
plt.xlabel('Month')
plt.ylabel('CPC')
plt.xticks(rotation=45)
plt.show()

# Plot CPA by Month
plt.figure(figsize=(10, 6))
sns.barplot(x=month_cpa.index, y=month_cpa.values, palette='plasma')
plt.title('CPA by Month')
plt.xlabel('Month')
plt.ylabel('CPA')
plt.xticks(rotation=45)
plt.show()

# Plot ROAS by Month
plt.figure(figsize=(10, 6))
sns.barplot(x=month_roas.index, y=month_roas.values, palette='magma')
plt.title('ROAS by Month')
plt.xlabel('Month')
plt.ylabel('ROAS')
plt.xticks(rotation=45)
plt.show()

"""You will notice that the days or months with higher performance in ROAS could be better for expansion or increasing the budget.
Time periods could indicate a seasonal impact on the campaign. **bold text**
"""











